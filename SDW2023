#Santander Dev week 2023 (ETL com Python)

#Contexto: Você é um cientista de dados no Santander e recebeu a tarefa de envolver seus clientes de maneira mais personalizada. 
#Seu objetivo é usar o poder da IA Generativa para criar mensagens de marketing personalizadas que serão entregues a cada cliente.

#Condições do Problema:

#1- Você recebeu uma planilha simples, em formato CSV ('SDW2023.csv'), com uma lista de IDs de usuário do banco:

#UserID
#0  #1 #2


#2- Seu trabalho é consumir o endpoint GET https://sdw-2023-prd.up.railway.app/users/{id} (API da Santander Dev Week 2023) para obter os dados de cada cliente.
#3- Depois de obter os dados dos clientes, você vai usar a API do ChatGPT (OpenAI) para gerar uma mensagem de marketing personalizada para cada cliente. 
#Essa mensagem deve enfatizar a importância dos investimentos.
#4- Uma vez que a mensagem para cada cliente esteja pronta, você vai enviar essas informações de 
#volta para a API, atualizando a lista de "news" de cada usuário usando o endpoint PUT https://sdw-2023-prd.up.railway.app/users/{id}.


# Utilize sua própria URL se quiser ;)
# Repositório da API: https://github.com/digitalinnovationone/santander-dev-week-2023-api
sdw2023_api_url = 'https://sdw-2023-prd.up.railway.app'
#Extract
  
#Extraia a lista de IDs de usuário a partir do arquivo CSV. Para cada ID, faça uma requisição GET para obter os dados do usuário correspondente.


import pandas as pd

df = pd.read_csv('SDW2023.csv.TXT')
user_ids = df['UserID'].tolist()
print(user_ids)

df.head()

import requests
import json

def get_user(id):
  response = requests.get(f'{sdw2023_api_url}/users/{id}')
  return response.json() if response.status_code == 200 else None

users = [user for id in user_ids if (user := get_user(id)) is not None]
print(json.dumps(users, indent=2))

#Transform
#Utilize a API do OpenAI GPT-4 para gerar uma mensagem de marketing personalizada para cada usuário.


!pip install openai

openai_api_key = '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'

import openai
import os
#parte criada para nao deixar a api key no código.
def setup_openai():
    openai_api_key = os.environ.get("OPENAI_API_KEY")
    if not openai_api_key:
        raise ValueError("API key not found. Set the OPENAI_API_KEY environment variable.")
    
    
openai.api_key = openai_api_key

def generate_ai_news(user):
  completion = openai.ChatCompletion.create(
    model="gpt-3.5-turbo",
    messages=[
      {
          "role": "system",
          "content": "Você é um especialista em markting bancário."
      },
      {
          "role": "user",
          "content": f"Crie uma mensagem para {user['name']} sobre a importância dos investimentos (máximo de 100 caracteres)"
      }
    ]
  )
  return completion.choices[0].message.content.strip('\"')

  def main():
   setup_openai()
    
   users = [UserID]  

for user in users:
  news = generate_ai_news(user)
  print(news)
 
user['news'].append({
      "icon": "https://digitalinnovationone.github.io/santander-dev-week-2023-api/icons/credit.svg",
      "description": news
  })

#resposta:
#Invista hoje e construa um futuro financeiro sólido! #InvistaSabedoria
#Invista no seu futuro financeiro!
#Invista hoje, colha amanhã! #OportunidadesDeCrescimento

#Load
#Atualize a lista de "news" de cada usuário na API com a nova mensagem gerada.



def update_user(user):
  response = requests.put(f"{sdw2023_api_url}/users/{user['id']}", json=user)
  return True if response.status_code == 200 else False

for user in users:
  success = update_user(user)
  print(f"User {user['name']} updated? {success}!")


#resposta final:
#User Hevy updated? True!
#User Tedy updated? True!
#User Makteo updated? True!
